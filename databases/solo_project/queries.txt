Display the information in one table (either table is fine).
SELECT * FROM artists;
1|Beyonce|1981|9|5
2|Carrie Underwood|1983|3|1
3|Calvin Harris|1984|1|2
4|Drake|1986|10|3
5|Kendrick Lamar|1987|6|3
6|Lady Gaga|1986|3|4
7|Meghan Trainor|1993|12|4
8|Usher|1978|10|5

Update an item that meets some condition (you can choose a condition that makes sense).
UPDATE artists SET name="Beyonce Knowles" WHERE id=1;

Display the information in both tables using one query.
SELECT * FROM genres, artists WHERE artists.genre_id=genres.id;
5|R&B|1|Beyonce Knowles|1981|9|5
1|Country|2|Carrie Underwood|1983|3|1
2|EDM|3|Calvin Harris|1984|1|2
3|Hip-Hop|4|Drake|1986|10|3
3|Hip-Hop|5|Kendrick Lamar|1987|6|3
4|Pop|6|Lady Gaga|1986|3|4
4|Pop|7|Meghan Trainor|1993|12|4
5|R&B|8|Usher|1978|10|5

Display a narrower selection of columns (fewer columns than all of them, in other words) from both tables using one query.
SELECT artists.name, genres.genre FROM artists JOIN genres ON artists.genre_id=genres.id;
Beyonce Knowles|R&B
Carrie Underwood|Country
Calvin Harris|EDM
Drake|Hip-Hop
Kendrick Lamar|Hip-Hop
Lady Gaga|Pop
Meghan Trainor|Pop
Usher|R&B

Delete an item that meets some condition (you can choose a condition that makes sense).
DELETE FROM artists WHERE id=4;


There are many types of JOINS available in SQL, the three major types of joins are: CROSS JOIN, INNER JOIN, OUTER JOIN

CROSS JOIN: Matches every row of the first table with every row of the second table.  In a table with x and y columns, the resulting table will have x*y columns.  CROSS JOINs have the potential to generate extremely large tables, they must be used with caution.
SELECT name, genre_id FROM artists CROSS JOIN genres;
Beyonce Knowles|5
Beyonce Knowles|5
Beyonce Knowles|5
Beyonce Knowles|5
Beyonce Knowles|5
Carrie Underwood|1
Carrie Underwood|1
Carrie Underwood|1
Carrie Underwood|1
Carrie Underwood|1
Calvin Harris|2
Calvin Harris|2
Calvin Harris|2
Calvin Harris|2
Calvin Harris|2
Kendrick Lamar|3
Kendrick Lamar|3
Kendrick Lamar|3
Kendrick Lamar|3
Kendrick Lamar|3
Lady Gaga|4
Lady Gaga|4
Lady Gaga|4
Lady Gaga|4
Lady Gaga|4
Meghan Trainor|4
Meghan Trainor|4
Meghan Trainor|4
Meghan Trainor|4
Meghan Trainor|4
Usher|5
Usher|5
Usher|5
Usher|5
Usher|5

INNER JOIN: creates a new result table by combing column values of two tables based upon the join-predicate.  It compares each row of table1 with each row of table2 to find all pairs of rows which the join-predicate.  When it is satisfied, column values for each matched pair of rows of A and B are combined into a result row.  This is the default and equivalent to JOIN.
SELECT artists.name, genres.genre FROM artists INNER JOIN genres ON artists.genre_id=genres.id;
Beyonce Knowles|R&B
Carrie Underwood|Country
Calvin Harris|EDM
Kendrick Lamar|Hip-Hop
Lady Gaga|Pop
Meghan Trainor|Pop
Usher|R&B

OUTER JOIN: an extension to INNER JOIN.  SQL standard defines 3 types of OUTER JOINs (LEFT, RIGHT, and FULL) but SQLite only supports the LEFT OUTER JOIN.  OUTER JOINs have a condition that is identical to INNER JOINs: expressed using an ON, USING, or NATURAL keyword.  The results table is calculated the same way.  Once the primary JOIN is calculated, an OUTER join will take any unjoined rows from one or both tables and return NULLS and append them to the resulting table.
SELECT artists.id, name, birth_year FROM artists LEFT OUTER JOIN genres ON artists.genre_id=genres.id;
1|Beyonce Knowles|1981
2|Carrie Underwood|1983
3|Calvin Harris|1984
5|Kendrick Lamar|1987
6|Lady Gaga|1986
7|Meghan Trainor|1993
8|Usher|1978

(Reference: http://www.tutorialspoint.com/sqlite/sqlite_using_joins.htm)